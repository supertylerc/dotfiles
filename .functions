# Functions below are shamelessly copied from
# https://github.com/mathiasbynens/dotfiles/blob/master/.functions

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* ./*
  fi
}

# Use Git’s colored diff when available
if hash git > /dev/null 2>& 1; then
  function diff() {
    git diff --no-index --color-words "$@"
  }
fi

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

function json() {
  if [ -t 0 ]; then
    python -mjson.tool <<< "$*" | pygmentize -l javascript;
  else
    python -mjson.tool | pygmentize -l javascript;
  fi
}

# Automatically source environment variables when entering a directory
function cd() {
  builtin cd "$@" && source .env_vars > /dev/null 2>&1 || return 0
}

# Move to a dev environment
function dev() {
  dev_path=~/Dropbox/Development
  if [[ $# -eq 1 ]]; then
    new_path="${dev_path}/${1}"
    if [[ -d "${new_path}" ]]; then
      dev_path="${new_path}"
    else
      echo "Warning: Directory doesn't exist.  Changing to ${dev_path} instead."
    fi
  fi
  cd $dev_path && ls -a
}

function aclgen() {
  # This function overrides the `aclgen` script that's installed.  Call
  # it with:
  #   command aclgen
  # if you need to call it directly instead of this function.
  # Usage:
  #   aclgen policy-name
  policy="${1}"
  if [[ ! -d policies ]] && [[ ! -d def ]]; then
    echo 'Unable to find the policies and def directories.'
    return 1
  fi
  if [[ "${policy}" == "list" ]]; then
    ls policies/
    return 0
  fi
  if [[ "${policy}" == "all" ]]; then
    command aclgen --format=yml --shade_checking
    return 0
  fi
  command aclgen -p policies/"${policy}".yml --format=yml --shade_checking
}
